using OpenCvSharp;
using OpenCvSharp.Internal.Util;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Data.SqlTypes;
using System.Linq;
using System.Runtime.InteropServices.ComTypes;
using System.Text;
using System.Threading.Tasks;

namespace histogram
{
    internal class Program
    {
        static void draw_histo(Mat hist,out Mat hist_img)
        {
            Size size = new Size(256, 200);
            hist_img = new Mat(size,MatType.CV_8U,Scalar.All(255));
            float bin = (float)hist_img.Cols / hist.Rows;
            Cv2.Normalize(hist, hist, 0, hist_img.Rows, NormTypes.MinMax);

            for(int i = 0; i < hist.Rows; i++)
            {
                float sx = i * bin;
                float ex = (i+1) * bin;
                Point pt1 = new Point(sx,0);
                Point pt2 = new Point(ex,hist.At<float>(i));

                if (pt2.Y > 0) Cv2.Rectangle(hist_img, pt1, pt2, Scalar.All(0), -1);
            }
            Cv2.Flip(hist_img, hist_img, 0);
        }
        static void calc_Histo(Mat image, out Mat hist, int bins, int rangeMax = 256)
        {
            int[] histSize = { bins };            
            Rangef[] ranges = { new Rangef(0, rangeMax) }; 
            int[] channels = { 0 };        
            hist = new Mat();
            Cv2.CalcHist(new[] { image }, channels, null, hist, 1, histSize, ranges);
        }

        static int serach_valIdx(Mat hist,int bias = 0)
        {
            for(int i=0;i<hist.Rows; i++)
            {
                int idx = Math.Abs(bias - i);
                if (hist.At<float>(idx) > 0) return idx;
            }
            return -1;
        }
        static void Main(string[] args)
        {
            Mat image = Cv2.ImRead("C:\\Users\\Admin\\Desktop\\img\\histo_test.jpg", ImreadModes.Color);

            if (image.Empty())
            {
                Console.WriteLine("이미지 오류");
                Environment.Exit(0);
            }

            Mat hist, hist_dst, img, dst_img;
            int histSize = 64, ranges = 256;
            calc_Histo(image, out hist,histSize,ranges);
            float wid = (float)ranges / histSize;
            int lval = (int)(serach_valIdx(hist, 0) * wid);
            int hval = (int)(serach_valIdx(hist,hist.Rows-1) * wid);
            Console.WriteLine($"높은 값은 = {hval}");
            Console.WriteLine($"낮은 값은 = {lval}");

            int dval = hval - lval;
            Mat dst = (image - lval) * (255.0 / dval);

            calc_Histo(dst,out hist_dst,histSize,ranges);
            draw_histo(hist,out img);
            draw_histo(hist_dst, out dst_img);


            Cv2.ImShow("image", image);
            Cv2.ImShow("img", img);
            Cv2.ImShow("dst", dst);
            Cv2.ImShow("dst_img", dst_img);
            Cv2.WaitKey();
            Cv2.DestroyAllWindows();
        }
    }
}
