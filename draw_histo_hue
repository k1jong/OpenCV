using OpenCvSharp;
using OpenCvSharp.Internal.Util;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.SqlTypes;
using System.Linq;
using System.Runtime.InteropServices.ComTypes;
using System.Text;
using System.Threading.Tasks;

namespace histogram
{
    internal class Program
    {
        static void draw_histo(Mat hist,out Mat hist_img)
        {
            Size size = new Size(256, 200);
            hist_img = new Mat(size,MatType.CV_8U,Scalar.All(255));
            float bin = (float)hist_img.Cols / hist.Rows;
            Cv2.Normalize(hist, hist, 0, hist_img.Rows, NormTypes.MinMax);

            for(int i = 0; i < hist.Rows; i++)
            {
                float sx = i * bin;
                float ex = (i+1) * bin;
                Point pt1 = new Point(sx,0);
                Point pt2 = new Point(ex,hist.At<float>(i));

                if (pt2.Y > 0) Cv2.Rectangle(hist_img, pt1, pt2, Scalar.All(0), -1);
            }
            Cv2.Flip(hist_img, hist_img, 0);
        }
        //static void calcHist(Mat image, out Mat hist, int bins, int range_max = 256)
        //{
        //    hist = new Mat(bins, 1, MatType.CV_32F, Scalar.All(0));
        //    float gap = range_max;
        //    for (int i = 0; i < image.Rows; i++)
        //    {
        //        for (int j = 0; j < image.Cols; j++)
        //        {
        //            int idx = (int)(image.At<char>(i, j) / gap);
        //            hist.At<float>(idx)++;
        //        }
        //    }
        //}
        static void calc_Histo(Mat image, out Mat hist, int bins, int rangeMax = 256)
        {
            int[] histSize = { bins };            
            Rangef[] ranges = { new Rangef(0, rangeMax) }; 
            int[] channels = { 0 };        
            hist = new Mat();
            Cv2.CalcHist(new[] { image }, channels, null, hist, 1, histSize, ranges);
        }
        static Mat make_palatte(int rows)
        {
            Mat hsv = new Mat(rows, 1, MatType.CV_8UC3);
            for(int i=0;i< rows; i++)
            {
                float hue = (float)i / rows * 180;
                byte bytehue = (byte)Math.Min(Math.Max(hue, 0), 255);

                hsv.At<Vec3b>(i) = new Vec3b(bytehue, 255, 255);
            }

            Cv2.CvtColor(hsv, hsv, ColorConversionCodes.HSV2BGR);
            return hsv;
        }

        static void draw_histo_hue(Mat hist, out Mat hist_img, Size size)
        {
            Mat hsv_palatte = make_palatte(hist.Rows);
            hist_img = new Mat(size, MatType.CV_8UC3, Scalar.All(255));
            float bin = (float)hist_img.Cols / hist.Rows;
            Cv2.Normalize(hist, hist, 0, hist_img.Rows, NormTypes.MinMax);

            for (int i = 0; i < hist.Rows; i++)
            {
                float sx = i * bin;
                float sy = (i + 1) * bin;
                Point pt1 = new Point(sx, 0);
                Point pt2 = new Point(sy, hist.At<float>(i));

                Vec3b val = hsv_palatte.At<Vec3b>(i);
                Scalar color = new Scalar((byte)val.Item0, (byte)val.Item1, (byte)val.Item2);

                if (pt2.Y > 0)
                    Cv2.Rectangle(hist_img, pt1, pt2, color, -1);
            }
            Cv2.Flip(hist_img, hist_img, FlipMode.X);
        }
        static void Main(string[] args)
        {
            Mat image = Cv2.ImRead("C:\\Users\\Admin\\Desktop\\다운로드.jpg", ImreadModes.Color);

            if (image.Empty())
            {
                Console.WriteLine("이미지 오류");
                Environment.Exit(0);
            }

            Mat hue_hist, hue_hist_img;
            Mat HSV_img = new Mat();
            Mat[] HSV_arr = new Mat[3];

            Cv2.CvtColor(image, HSV_img, ColorConversionCodes.BGR2HSV);
            HSV_arr = Cv2.Split(HSV_img);

            calc_Histo(HSV_arr[0],out hue_hist,18,100);
            draw_histo_hue(hue_hist, out hue_hist_img, new Size(360, 200));

            Cv2.ImShow("image", image);
            Cv2.ImShow("hue_hist_img", hue_hist_img);
            Cv2.WaitKey();
            Cv2.DestroyAllWindows();
        }
    }
}
