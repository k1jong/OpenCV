using OpenCvSharp;
using OpenCvSharp.Internal.Util;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Data.SqlTypes;
using System.Linq;
using System.Runtime.InteropServices.ComTypes;
using System.Text;
using System.Threading.Tasks;

namespace histogram
{
    internal class Program
    {
        static void draw_histo(Mat hist,out Mat hist_img)
        {
            Size size = new Size(256, 200);
            hist_img = new Mat(size,MatType.CV_8U,Scalar.All(255));
            float bin = (float)hist_img.Cols / hist.Rows;
            Cv2.Normalize(hist, hist, 0, hist_img.Rows, NormTypes.MinMax);

            for(int i = 0; i < hist.Rows; i++)
            {
                float sx = i * bin;
                float ex = (i+1) * bin;
                Point pt1 = new Point(sx,0);
                Point pt2 = new Point(ex,hist.At<float>(i));

                if (pt2.Y > 0) Cv2.Rectangle(hist_img, pt1, pt2, Scalar.All(0), -1);
            }
            Cv2.Flip(hist_img, hist_img, 0);
        }
        static void calc_Histo(Mat image, out Mat hist, int bins, int rangeMax = 256)
        {
            int[] histSize = { bins };            
            Rangef[] ranges = { new Rangef(0, rangeMax) }; 
            int[] channels = { 0 };        
            hist = new Mat();
            Cv2.CalcHist(new[] { image }, channels, null, hist, 1, histSize, ranges);
        }
        static void create_hist(Mat img,out Mat hist,out Mat hist_img)
        {
            int size = 256, rag = 256;
            calc_Histo(img, out hist, size, rag);
            draw_histo(hist, out hist_img);
        }
        static void Main(string[] args)
        {
            Mat image = Cv2.ImRead("C:\\Users\\Admin\\Desktop\\img\\equalize_test.jpg", ImreadModes.Grayscale);

            if (image.Empty())
            {
                Console.WriteLine("이미지 오류");
                Environment.Exit(0);
            }

            Mat hist, dst1, dst2 = new Mat(), hist_img, hist_img1, hist_img2;
            create_hist(image, out hist, out hist_img);

            Mat accum_hist = new Mat(hist.Size(), hist.Type(),new  Scalar(0));
            accum_hist.At<float>(0) = hist.At<float>(0);
            for(int i = 1; i < hist.Rows; i++)
                accum_hist.At<float>(i) = accum_hist.At<float>(i-1) + hist.At<float>(i);

            accum_hist /= Cv2.Sum(hist)[0];
            accum_hist *= 255;
            dst1 = new Mat(image.Size(),MatType.CV_8U);
            for(int i = 0; i < image.Rows; i++)
            {
                for(int j=0;j< image.Cols; j++)
                {
                    int idx = image.At<byte>(i, j);
                    dst1.At<byte
                        >(i, j) = (byte)accum_hist.At<float>(idx);
                }
            }

            Cv2.EqualizeHist(image, dst2);
            create_hist(dst1, out hist, out hist_img1);
            create_hist(dst2, out hist, out hist_img2);

            Cv2.ImShow("image", image);
            Cv2.ImShow("hist_img", hist_img);
            Cv2.ImShow("dst1", dst1);
            Cv2.ImShow("hist_img1", hist_img1);
            Cv2.ImShow("dst2", dst2);
            Cv2.ImShow("hist_img2", hist_img2);
            Cv2.WaitKey();
            Cv2.DestroyAllWindows();
        }
    }
}
